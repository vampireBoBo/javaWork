https://www.cnblogs.com/guoqingqu/p/4530438.html

http://blog.csdn.net/liu1pan2min3/article/details/53997513

https://www.cnblogs.com/nfcm/p/7550772.html


不同的@value取值法：http://blog.csdn.net/cqnaqjy/article/details/51836465

1.profiles定义了各个环境的变量id

2.filters中定义了变量配置文件的地址，其中地址中的环境变量就是上面profile中定义的值

3.resources中是定义哪些目录下的文件会被配置文件中定义的变量替换，一般我们会把项目的配置文件放在src/main/resources下，像db,bean等，里面用到的变量在打包时就会根据filter中的变量配置替换成固定值

！！ 使用profile创建的配置文件在项目加载时  会直接进行加载  运行之后的项目不显示该文件  同时 那些文件需要
使用配置文件中的key值时  需要使用filter标签 进行过滤  这样在该路径下的key值才会被直接替换成需要的value值

打包时-P 指定的是profile的id  通过该id  然后找到<env>标签中指定的配置文件

1、pom文件配置profile标签申请需要使用的配置文件，结构如下：
	
	<profiles>
		<!-- 开发环境 -->
		<profile>
			<id>dev</id>              //配置文件的id  可以随便命名
			<properties>
				<env>dev</env>    //配置文件的名称 需要与创建的配置文件名称保持一致 自定义了标签env
 			</properties>
			<activation>					
				<activeByDefault>true</activeByDefault>   //表示默认使用这个配置文件
			</activation>
		</profile>
		<!-- 测试环境 -->
		<profile>
			<id>test</id>
			<properties>
				<env>test</env>
			</properties>
		</profile>
	</profiles>
2、指定配置文件的过滤路径
	<build>
		<finalName>项目名称</finalName>
		<!-- 指定需要加载的属性文件路径 -->
		<filters>
			<filter>profiles/${env}.properties</filter>
		</filters>
		<!-- 声明需要替换的资源 -->
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>  //表示开启替换功能  <!--是否替换资源中的属性-->
			</resource>
		</resources>
	</bulid>
3、在配置文件或者XMl文件中使用${key} 读取profile中的key
4、在java代码中 使用@value("${key}") 进行读取